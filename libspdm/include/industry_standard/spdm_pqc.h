/** @file
  Definitions of SPDM PQC extension.

Copyright (c) 2019 - 2020, Intel Corporation. All rights reserved.<BR>
SPDX-License-Identifier: BSD-2-Clause-Patent

**/


#ifndef __SPDM_PQC_H__
#define __SPDM_PQC_H__

#include <base.h>
#include <industry_standard/spdm.h>

#pragma pack(1)

typedef uint8  pqc_algo_t[12];

///
/// PQC can be enabled with hybrid mode in below cases:
///   If both BaseAsymAlgo and PqcDigitalSignatureAlgo are present, the hybrid signing is used.
///      Signature = BaseAsym Signature || 4 bytes PqcSig Signature Size || PqcSig Signature
///   If both ReqAsymAlgo and ReqPqcDigitalSignatureAlgo are present, the hybrid requester signing is used.
///      Signature = ReqBaseAsym Signature || 4 bytes PqcSig Signature Size || PqcReqSig Signature
///   If both DheNameGroup and PqcKeyEstablishmentAlgo are present, the hybrid key exchange is used.
///      Req ExchangeData = Dhe ExchangeData || PqcKem ExchangeData (Req PubKey)
///      Rsp ExchangeData = Dhe ExchangeData || PqcKem ExchangeData (Rsp CipherText)
///      Master Secret = DHE Secret || Pqc Secret
///
/// Reference:
///   https://csrc.nist.gov/CSRC/media/Events/Second-PQC-Standardization-Conference/documents/accepted-papers/stebila-prototyping-post-quantum.pdf
///   https://datatracker.ietf.org/doc/draft-ietf-tls-hybrid-design/
///   https://www.microsoft.com/en-us/research/project/post-quantum-tls/
///
///
/// NOTE: For a given implementation, the supported hybrid algorithm may be a subset based upon the NIST security level.
///
/// For hybrid singing, the message to be signed is hashed using the SHA-2 hash function matching the security level of the OQS scheme
/// (SHA256 for L1, SHA384 for L2/L3, SHA512 for L4/L5) before being signed by the classical algorithm.
/// The message to be signed is passed directly to the OQS signature API without hashing.
///
/// Reference:
/// https://github.com/open-quantum-safe/openssl
/// https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/crypto/ec/oqs_meth.c
///

#define SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_PQC_DIGITAL_SIGNATURE_ALGO      11
#define SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_PQC_REQ_DIGITAL_SIGNATURE_ALGO  12
#define SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_PQC_KEY_ESTABLISHMENT_ALGO      13

///
/// The KEM Auth:
///   For KEY_EXCHANGE, 3 KEMs are involved: PqcKem, PqcKemAuth, PqcReqKemAuth (mut-auth)
///     KEY_EXCHANGE: ExchangeData ||= PqcKemAuth ExchangeData (CipherText)
///     KEY_ExCHANGE_RSP: ExchangeData ||= PqcReqKemAuth ExchangeData (CipherText), Signature = NULL
///     FINISH: Signature = NULL
///
///   Key Schedule:
///     dSSe = HKDF.Extract(0, PqcKem.SharedSecret)
///     SSe = HKDF.Expand(dSSe, bin_str_kem)
///     dSSr = HKDF.Extract(SSe, PqcKemAuth.SharedSecret)
///     SSr = HKDF.Expand(dSSr, bin_str_kem_auth)
///     dSSi = HKDF.Extract(SSr, PqcReqKemAuth.SharedSecret) -- mut_auth, or dSSi = All 0 -- no_mut_auth
///     SS = HKDF.Expand(dSSi, bin_str_req_kem_auth)
///     Pqc Secret = SS
///     where:
///       bin_str_kem string = "kem_e derive"
///       bin_str_kem_auth string = "kem_auth derive"
///       bin_str_req_kem_auth string = "req_kem_auth derive"
///
/// Reference:
///   Strongly Secure Authenticated Key Exchange from Factoring Codes and Lattices - https://eprint.iacr.org/2012/211
///   Post-Quantum TLS Without Handshake Signatures - https://eprint.iacr.org/2020/534
///   https://datatracker.ietf.org/doc/draft-celi-wiggers-tls-authkem
///

#define SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_PQC_KEM_AUTH_ALGO               14
#define SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_PQC_REQ_KEM_AUTH_ALGO           15

typedef struct {
  uint8                alg_type;
  uint8                alg_count;
  pqc_algo_t           alg_supported;
} spdm_negotiate_algorithms_pqc_struct_table_t;

///
/// SPDM NEGOTIATE_ALGORITHMS PQC_DIGITAL_SIGNATURE_ALGO/REQ_PQC_DIGITAL_SIGNATURE_ALGO
///

// DILITHIUM
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_INDEX_BEGIN 0
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_INDEX_END   0
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_2                  BIT0
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_3                  BIT1
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_5                  BIT2
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_2_AES              BIT3
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_3_AES              BIT4
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_DILITHIUM_5_AES              BIT5

// FALCON
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_FALCON_INDEX_BEGIN 1
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_FALCON_INDEX_END   1
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_FALCON_512                   BIT0
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_FALCON_1024                  BIT1

// SPHINCS
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_INDEX_BEGIN 4
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_INDEX_END   8
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_128F_ROBUST   BIT0
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_128F_SIMPLE   BIT1
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_128S_ROBUST   BIT2
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_128S_SIMPLE   BIT3
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_192F_ROBUST   BIT4
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_192F_SIMPLE   BIT5
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_192S_ROBUST   BIT6
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_192S_SIMPLE   BIT7
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_256F_ROBUST   BIT8
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_256F_SIMPLE   BIT9
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_256S_ROBUST   BIT10
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_HARAKA_256S_SIMPLE   BIT11
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_128F_ROBUST   BIT12
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_128F_SIMPLE   BIT13
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_128S_ROBUST   BIT14
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_128S_SIMPLE   BIT15
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_192F_ROBUST   BIT16
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_192F_SIMPLE   BIT17
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_192S_ROBUST   BIT18
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_192S_SIMPLE   BIT19
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_256F_ROBUST   BIT20
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_256F_SIMPLE   BIT21
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_256S_ROBUST   BIT22
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHA256_256S_SIMPLE   BIT23
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_128F_ROBUST BIT24
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_128F_SIMPLE BIT25
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_128S_ROBUST BIT26
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_128S_SIMPLE BIT27
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_192F_ROBUST BIT28
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_192F_SIMPLE BIT29
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_192S_ROBUST BIT30
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_192S_SIMPLE BIT31
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_256F_ROBUST BIT32
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_256F_SIMPLE BIT33
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_256S_ROBUST BIT34
#define SPDM_ALGORITHMS_PQC_DIGITAL_SIGNATURE_ALGO_SPHINCS_SHAKE256_256S_SIMPLE BIT35

///
/// SPDM NEGOTIATE_ALGORITHMS PQC_KEY_ESTABLISHMENT_ALGO
///

// BIKE
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE_INDEX_BEGIN  0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE_INDEX_END    0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE1_L1_CPA                  BIT0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE1_L3_CPA                  BIT1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE1_L1_FO                   BIT2
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_BIKE1_L3_FO                   BIT3

// CLASSIC_MCELIECE
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_INDEX_BEGIN  1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_INDEX_END    2
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_348864       BIT0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_348864F      BIT1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_460896       BIT2
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_460896F      BIT3
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_6688128      BIT4
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_6688128F     BIT5
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_6960119      BIT6
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_6960119F     BIT7
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_8192128      BIT8
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_CLASSIC_MCELIECE_8192128F     BIT9

// HQC
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_HQC_INDEX_BEGIN  3
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_HQC_INDEX_END    3
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_HQC_128                       BIT0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_HQC_192                       BIT1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_HQC_256                       BIT2

// KYBER
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_INDEX_BEGIN  4
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_INDEX_END    4
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_512                     BIT0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_768                     BIT1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_1024                    BIT2
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_512_90S                 BIT3
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_768_90S                 BIT4
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_KYBER_1024_90S                BIT5

// SIKE
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_INDEX_BEGIN  9
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_INDEX_END    10
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P434                      BIT0
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P434_COMPRESSED           BIT1
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P503                      BIT2
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P503_COMPRESSED           BIT3
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P610                      BIT4
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P610_COMPRESSED           BIT5
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P751                      BIT6
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIDH_P751_COMPRESSED           BIT7
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P434                      BIT8
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P434_COMPRESSED           BIT9
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P503                      BIT10
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P503_COMPRESSED           BIT11
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P610                      BIT12
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P610_COMPRESSED           BIT13
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P751                      BIT14
#define SPDM_ALGORITHMS_PQC_KEY_ESTABLISHMENT_ALGO_SIKE_P751_COMPRESSED           BIT15

#pragma pack()

#endif

